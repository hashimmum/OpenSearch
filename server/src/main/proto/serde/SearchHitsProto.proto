syntax = "proto3";

package org.opensearch.serde.proto;

option java_outer_classname = "SearchHitsTransportProto";

/*
SearchHits hits;
int counter;
 */
message FetchSearchResultProto {
    SearchHitsProto hits = 1;
    int64 counter = 2;
}

/*
SearchHit[] hits
TotalHits totalHits
float maxScore
SortField[] sortFields
String collapseField
Object[] collapseValues
 */
message SearchHitsProto {
  repeated SearchHitProto hits = 1;
  TotalHitsProto total_hits = 2;
  float max_score = 3;
  string collapse_field = 4;
  bytes sort_fields = 5;
  bytes collapse_values = 6;
}

/**
float score
Text id
NestedIdentity nestedIdentity
long version
long seqNo
long primaryTerm
BytesReference source
Explanation explanation
Map<String, DocumentField> documentFields
Map<String, DocumentField> metaFields
Map<String, HighlightField> highlightedFields
SearchSortValues sortValues
Map<String, Float> matchedQueries
SearchShardTarget shard
Map<String, SearchHits> innerHits
*/
message SearchHitProto {
  float score = 1;
  string id = 2;
  int64 version = 3;
  int64 seq_no = 4;
  int64 primary_term = 5;
  bytes source = 6;
  map<string, DocumentFieldProto> document_fields = 7;
  map<string, DocumentFieldProto> meta_fields = 8;
  map<string, HighlightFieldProto> highlight_fields = 9;
  map<string, float> matched_queries = 10;
  map<string, SearchHitsProto> inner_hits = 11;
  SearchSortValuesProto sort_values = 12;
  optional NestedIdentityProto nested_identity = 13;
  optional SearchShardTargetProto shard = 14;
  optional ExplanationProto explanation = 15;
}

/*
int value;
Relation relation;
 */
message TotalHitsProto {
  int64 value = 1;
  int64 relation = 2;
}

/*
Text field;
int offset;
NestedIdentity child;
 */
message NestedIdentityProto {
  string field = 1;
  int32 offset = 2;
  NestedIdentityProto child = 3;
}

/*
String name
List<Object> values
 */
message DocumentFieldProto {
  string name = 1;
  repeated bytes values = 2;
}

/*
String name
Text[] fragments
 */
message HighlightFieldProto {
  string name = 1;
  bool frags_null = 2; // fragments can be null OR empty unfortunately
  repeated string fragments = 3;
}

/*
Object[] formattedSortValues
Object[] rawSortValues
 */
message SearchSortValuesProto {
  repeated bytes formatted_sort_values = 1;
  repeated bytes raw_sort_values = 2;
}

/*
boolean match
Number value
String description
List<Explanation> details
 */
message ExplanationProto {
  bool match = 1;
  oneof value {
    int32 int_value = 2;
    int64 long_value = 3;
    float float_value = 4;
    double double_value = 5;
  }
  string description = 6;
  repeated ExplanationProto details = 7;
}

/*
Text nodeId
ShardId shardId
String clusterAlias
 */
message SearchShardTargetProto {
  string node_id = 1;
  ShardIdProto shard_id = 2;
  optional string cluster_alias = 3;
}

/*
Index index
int shardId
int hashCode
 */
message ShardIdProto {
  IndexProto index = 1;
  int32 shard_id = 2;
  int32 hash_code = 3;
}

/*
String name
String uuid
 */
message IndexProto {
  string name = 1;
  string uuid = 2;
}
